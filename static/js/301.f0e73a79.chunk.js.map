{"version":3,"file":"static/js/301.f0e73a79.chunk.js","mappings":"sPAEMA,E,QAAUC,GAAAA,OAAa,CAC3BC,QAAS,gCACTC,OAAQ,MACRC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAMF,GAAN,yFACJJ,EAAQO,IAAR,gBAAqBH,EAArB,aADI,cACrBI,EADqB,OAGrBC,EAAOD,EAASC,KAAKC,QAHA,kBAKpBD,GALoB,2CAAH,sD,6BCuC1B,EA3CgB,WACd,IAAQE,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOb,EAAP,KAAgBc,EAAhB,KACMC,GAAgBC,EAAAA,EAAAA,SAAO,GAkB7B,OAhBAC,EAAAA,EAAAA,YAAU,WACJF,EAAcG,UAChBH,EAAcG,SAAU,GAE1B,IAAMC,EAAa,mCAAG,6GAEYb,EAAcK,GAF1B,OAEZS,EAFY,OAGlBN,EAAWM,GAHO,gDAKlBC,QAAQC,IAAR,MALkB,yDAAH,qDASnBH,GACD,GAAE,CAACR,IAEmB,IAAnBX,EAAQuB,QAER,SAACC,EAAA,EAAD,CAAKC,EAAG,EAAR,SACGzB,EAAQ0B,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC/B,OACE,UAACL,EAAA,EAAD,YACE,SAAC,EAAAM,QAAD,UAAUH,KACV,SAAC,EAAAI,gBAAD,UAAkBH,MAFVC,EAKb,OAKH,SAAC,EAAAE,gBAAD,sDAKL,C,oIC7CYA,GAAkBC,EAAAA,EAAAA,IAAO,IAAPA,CAAH,uHACb,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,UAAU,EAAtB,IACI,SAAAF,GAAC,OAAIA,EAAEC,MAAME,YAAYC,IAAxB,IACT,SAAAJ,GAAC,OAAIA,EAAEC,MAAMI,MAAM,EAAlB,IACS,SAAAL,GAAC,OAAIA,EAAEC,MAAMI,MAAM,EAAlB,IAGVR,GAAUE,EAAAA,EAAAA,IAAO,KAAPA,CAAH,6CACL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,UAAU,EAAtB,G","sources":["services/reviews.service.js","components/Reviews/Reviews.jsx","components/Reviews/StyledReviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst reviews = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  method: 'get',\n  params: {\n    api_key: '0a6b3e0f3263435d7fc5dc734c160ca5',\n  },\n});\n\nexport const getReviewsApi = async params => {\n  const response = await reviews.get(`movie/${params}/reviews`);\n\n  const data = response.data.results;\n\n  return data;\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useRef, useState } from 'react';\nimport { getReviewsApi } from '../../services/reviews.service';\nimport { StyledParagraph, TitleH3 } from './StyledReviews';\nimport { Box } from 'Theme/Box';\n\nconst Reviews = () => {\n  const { moviesId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    }\n    const getApiService = async () => {\n      try {\n        const responseReviews = await getReviewsApi(moviesId);\n        setReviews(responseReviews);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    getApiService();\n  }, [moviesId]);\n\n  if (reviews.length !== 0) {\n    return (\n      <Box m={4}>\n        {reviews.map(({ author, content, id }) => {\n          return (\n            <Box key={id}>\n              <TitleH3>{author}</TitleH3>\n              <StyledParagraph>{content}</StyledParagraph>\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  } else {\n    return (\n      <StyledParagraph>\n        We don't have any reviews for this movie\n      </StyledParagraph>\n    );\n  }\n};\n\nexport default Reviews;\n","import styled from 'styled-components';\n\nexport const StyledParagraph = styled('p')`\n  font-size: ${p => p.theme.fontSizes[3]}px;\n  /* font-weight: ${p => p.theme.fontWeights.bold}; */\n  margin: ${p => p.theme.space[0]};\n  /* margin-bottom: ${p => p.theme.space[4]}px; */\n`;\n\nexport const TitleH3 = styled('h3')`\n  font-size: ${p => p.theme.fontSizes[4]}px;\n`;\n"],"names":["reviews","axios","baseURL","method","params","api_key","getReviewsApi","get","response","data","results","moviesId","useParams","useState","setReviews","isFirstRender","useRef","useEffect","current","getApiService","responseReviews","console","log","length","Box","m","map","author","content","id","TitleH3","StyledParagraph","styled","p","theme","fontSizes","fontWeights","bold","space"],"sourceRoot":""}